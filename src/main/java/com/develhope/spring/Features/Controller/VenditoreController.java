package com.develhope.spring.Features.Controller;

import com.develhope.spring.Features.Entity.User.Role;
import com.develhope.spring.Features.Entity.User.User;
import com.develhope.spring.Features.Service.VenditoreService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.time.format.DateTimeParseException;

@RestController
@RequestMapping("/venditore")
public class VenditoreController {

    @Autowired
    private VenditoreService venditoreService;

    @Operation(summary = "Delete a Seller")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Seller deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Seller not found")
    })
    @DeleteMapping("/{venditoreId}")
    public ResponseEntity<?> deleteVenditore(@PathVariable Long venditoreId, @AuthenticationPrincipal User user) {
        if (user.getRole() == Role.AMMINISTRATORE) {
            try {
                venditoreService.deleteVenditore(venditoreId);
                return ResponseEntity.ok("Seller deleted successfully");
            } catch (RuntimeException e) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Seller not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized access");
        }
    }

    @Operation(summary = "Update a Seller")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Seller updated successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Seller not found")
    })
    @PutMapping("/{venditoreId}")
    public ResponseEntity<?> updateVenditore(@PathVariable Long venditoreId, @RequestBody User venditoreDetails, @AuthenticationPrincipal User user) {
        if (user.getRole() == Role.AMMINISTRATORE) {
            try {
                User updatedVenditore = venditoreService.updateVenditore(venditoreId, venditoreDetails);
                return ResponseEntity.ok(updatedVenditore);
            } catch (RuntimeException e) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Seller not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized access");
        }
    }

    @Operation(summary = "Get the number of sales made by a venditore in a given period")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved sales count"),
            @ApiResponse(responseCode = "400", description = "Invalid date format"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Seller not found")
    })
    @GetMapping("/{id}/salesCount")
    public ResponseEntity<?> getSalesCount(@PathVariable Long id, @RequestParam String startDate, @RequestParam String endDate, @AuthenticationPrincipal User user) {
        if (user.getRole() == Role.AMMINISTRATORE) {
            try {
                OffsetDateTime start = OffsetDateTime.parse(startDate);
                OffsetDateTime end = OffsetDateTime.parse(endDate);
                long salesCount = venditoreService.getSalesCount(id, start, end);
                return ResponseEntity.ok(salesCount);
            } catch (DateTimeParseException e) {
                return ResponseEntity.badRequest().body("Invalid date format. Please provide dates in ISO-8601 format");
            } catch (RuntimeException e) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Seller not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized access");
        }
    }

    @Operation(summary = "Get the total profit generated by a Seller in a given period")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved profit"),
            @ApiResponse(responseCode = "400", description = "Invalid date format"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Seller not found")
    })
    @GetMapping("/{id}/profit")
    public ResponseEntity<?> getProfit(@PathVariable Long id, @RequestParam String startDate, @RequestParam String endDate, @AuthenticationPrincipal User user) {
        if (user.getRole() == Role.AMMINISTRATORE) {
            try {
                OffsetDateTime start = OffsetDateTime.parse(startDate);
                OffsetDateTime end = OffsetDateTime.parse(endDate);
                BigDecimal profit = venditoreService.getProfit(id, start, end);
                return ResponseEntity.ok(profit);
            } catch (DateTimeParseException e) {
                return ResponseEntity.badRequest().body("Invalid date format. Please provide dates in ISO-8601 format");
            } catch (RuntimeException e) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Seller not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized access");
        }
    }
}
